from telebot import types
from threading import Thread
import telebot
import insert_tables, create_tables
import configparser

config = configparser.ConfigParser()
config.read('config.ini')
API_TOKEN = config['telegram_api']['token']
mails = dict()
create_tables.create_table()
bot = telebot.TeleBot(API_TOKEN)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    insert_tables.insert_user(message.from_user.first_name, message.chat.id)
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫", callback_data='register')
    btn2 = types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—á—Ç–æ–≤—ã—Ö —è—â–∏–∫–æ–≤", callback_data='check')
    markup.add(btn1)
    markup.add(btn2)
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}, –¥–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è "
                                      f"–ø–æ–º–æ—â–∏ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –≤–∞–∂–Ω—ã—Ö –ø–∏—Å–µ–º –≤–∞—à–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ "
                                      f"–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π", reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: True)
def callback_function(callback):
    global mails
    if callback.data == 'register':

        mails[f'{callback.message.chat.id}'] = {'email': None, 'password': None}
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ email üì¨", callback_data='email')
        btn2 = types.InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å üîë", callback_data='password')
        markup.add(btn1)
        markup.add(btn2)
        bot.send_message(callback.message.chat.id, '–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–≤–æ–µ–≥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ '
                                                   '—è—â–∏–∫–∞. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –∏ –≤–≤–µ–¥–∏—Ç–µ '
                                                   '–∑–Ω–∞—á–µ–Ω–∏–µ.', reply_markup=markup)

    elif callback.data == 'check':
        bot.send_message(callback.message.chat.id, '–§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—á—Ç–æ–≤—ã—Ö —è—â–∏–∫–æ–≤ –±—É–¥–µ—Ç —Ç—É—Ç')

    elif callback.data == 'email':
        bot.register_next_step_handler(callback.message, register_email)
        bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ email:')

    elif callback.data == 'password':
        bot.register_next_step_handler(callback.message, register_password)
        bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')

    elif callback.data == 'insert_db':

        try:
            insert_tables.insert_post(email=mails[f'{callback.message.chat.id}']['email'],
                                      password=mails[f'{callback.message.chat.id}']['password'],
                                      chat_id=f'{callback.message.chat.id}')
            bot.send_message(callback.message.chat.id,
                             f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ email: {mails[f'{callback.message.chat.id}']['email']}üéâ')

        except:
            bot.send_message(callback.message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞üòñüòñüòñ\n–Ø –µ—ë –∏—Å–ø—Ä–∞–≤–ª—è—éüòÖü§•üòè')

        finally:
            del mails[f'{callback.message.chat.id}']


def register_email(message):
    global mails
    mails[f'{message.chat.id}']['email'] = message.text.strip()
    markup = types.InlineKeyboardMarkup()
    if mails[f'{message.chat.id}']['password'] and mails[f'{message.chat.id}']['email']:
        btn1 = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='insert_db')
        btn2 = types.InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥", callback_data='register')
        markup.add(btn1)
        markup.add(btn2)
        bot.send_message(message.chat.id, f"""–í–∞—à email: {mails[f'{message.chat.id}']['email']}
    –í–∞—à –ø–∞—Ä–æ–ª—å: {mails[f'{message.chat.id}']['password']}""", reply_markup=markup)
    else:
        btn = types.InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å üîë", callback_data='password')
        markup.add(btn)
        bot.send_message(message.chat.id, f"–í–∞—à email: {mails[f'{message.chat.id}']['email']}", reply_markup=markup)


def register_password(message):
    global mails
    mails[f'{message.chat.id}']['password'] = message.text.strip()
    markup = types.InlineKeyboardMarkup()
    if mails[f'{message.chat.id}']['password'] and mails[f'{message.chat.id}']['email']:
        btn1 = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='insert_db')
        btn2 = types.InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥", callback_data='register')
        markup.add(btn1)
        markup.add(btn2)
        bot.send_message(message.chat.id, f"""–í–∞—à email: {mails[f'{message.chat.id}']['email']}
–í–∞—à –ø–∞—Ä–æ–ª—å: {mails[f'{message.chat.id}']['password']}""", reply_markup=markup)
    else:
        btn = types.InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ email üì¨", callback_data='email')
        markup.add(btn)
        bot.send_message(message.chat.id, f"–í–∞—à –ø–∞—Ä–æ–ª—å: {mails[f'{message.chat.id}']['password']}", reply_markup=markup)


@bot.message_handler(func=lambda message: True)
def echo_message(message):
    bot.reply_to(message, message.text)


def other_function():
    pass


def polling():
    bot.infinity_polling()


polling_thread = Thread(target=polling)

polling_thread.start()
